openapi: "3.0.2"
info:
  title: WalkAware Trento API
  version: "1.0"
servers:
  - url: https://walkaware.onrender.com/api/v1
    description: Produzione
  - url: http://localhost:3000/api/v1
    description: Localhost
paths:
  /utente/mobile:
    post:
      summary: Crea un nuovo utente mobile
      description: Endpoint per creare un nuovo utente mobile.
      tags:
        - UtenteMobile
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UtenteMobileRegistrationRequest"
      responses:
        "201":
          description: Created. Nuovo utente mobile creato con successo. Link in Location header.
          headers:
            Location:
              schema:
                type: string
              description: Link al nuovo utente mobile.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PostSuccessfulResponse"
        "400":
          description: Bad Request. Richiesta errata, vedi errore nel corpo della risposta.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /utente/mobile/login:
    post:
      summary: Login utente mobile
      description: Endpoint per il login di un utente mobile.
      tags:
        - UtenteMobile
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
      responses:
        "200":
          description: OK. Login con successo.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UtenteMobileLoginResponse"
        "400":
          description: Bad Request. Richiesta errata, vedi errore nel corpo della risposta.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Not Authorized. Credenziali non valide.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthError"

  /utente/mobile/{id}:
    get:
      summary: Restituisce un utente
      description: Endpoint per ottenere un utente
      tags:
        - UtenteMobile
      security:
        - apiKeyAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID dell'utente mobile
      responses:
        "200":
          description: OK. Utente trovato
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UtenteMobileGetResponse"
        "404":
          description: User not found with the specified ID
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /utente/mobile/{id}/segnalazioni:
    get:
      summary: Restituisce tutte le segnalazioni di un utente.
      description: Endpoint per ottenere tutte le segnalazioni di un utente.
      tags:
        - UtenteMobile
      security:
        - apiKeyAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID dell'utente mobile
      responses:
        "200":
          description: OK. Segnalazioni trovate.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UtenteMobileSegnalazioniResponse"
        "404":
          description: Not Found. Utente con l'id specificato non trovato
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: Crea una nuova segnalazione
      description: Endpoint per creare una nuova segnalazione. Verrà aggiunta sia all'utente specificato che nella collezione delle segnalazioni.
      tags:
        - UtenteMobile
      security:
        - apiKeyAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID dell'utente mobile
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SegnalazioneUtenteMobile"
      responses:
        "201":
          description: Created. Nuova segnalazione creata con successo. Link in Location header.
          headers:
            Location:
              schema:
                type: string
              description: Link alla nuova segnalazione.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PostSuccessfulResponse"
        "400":
          description: Bad Request. Richiesta errata, vedi errore nel corpo della risposta.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Not Found. Utente con l'id specificato non trovato
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /utente/mobile/{id}/punti:
    get:
      summary: Punti dell'utente mobile
      description: Endpoint per ottenere i punti di un utente mobile
      tags:
        - UtenteMobile
      security:
        - apiKeyAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID dell'utente mobile
      responses:
        "200":
          description: OK. Punteggio dell'utente.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UtenteMobilePuntiResponse"
        "404":
          description: Not Found. Utente con l'id specificato non trovato
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      summary: Aggiorna i punti dell'utente mobile
      description: Endpoint per aggiornare i punti di un utente mobile
      tags:
        - UtenteMobile
      security:
        - apiKeyAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID dell'utente mobile
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UtenteMobilePuntiRequest"
      responses:
        "200":
          description: OK. Punti aggiornati con successo
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UtenteMobilePuntiResponse"
        "404":
          description: Utente con l'id specificato non trovato.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "400":
          description: Bad Request. Richiesta errata, vedi errore nel corpo della risposta.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /utente/mobile/{id}/riscattaBuono:
    post:
      summary: Riscatta un premio
      description: Endpoint per riscattare un premio. Diventerà un buono
      tags:
        - UtenteMobile
      security:
        - apiKeyAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID dell'utente mobile
        - in: query
          name: premioId
          required: true
          schema:
            type: string
          description: Id del premio
      responses:
        "201":
          description: Created. Nuovo buono riscattato con successo
          headers:
            Location:
              schema:
                type: string
              description: link al nuovo buono riscattato
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PostSuccessfulResponse"
        "400":
          description: Bad Request. Richiesta errata, vedi errore nel corpo della risposta.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Not Found. Vedi errore nel corpo della risposta.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /utente/web:
    post:
      summary: Crea un nuovo utente web
      description: Endpoint per creare un nuovo utente web.
      tags:
        - UtenteWeb
      security:
        - apiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UtenteWeb"
      responses:
        "201":
          description: Created. Nuovo utente web creato con successo. Link in Location header.
          headers:
            Location:
              schema:
                type: string
              description: Link al nuovo utente web.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PostSuccessfulResponse"
        "400":
          description: Bad Request. Richiesta errata, vedi errore nel corpo della risposta.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /utente/web/login:
    post:
      summary: Login utente web
      description: Endpoint per il login di un utente mobile.
      tags:
        - UtenteWeb
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
      responses:
        "200":
          description: OK. Login con successo.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UtenteWebLoginResponse"
        "400":
          description: Bad Request. Richiesta errata, vedi errore nel corpo della risposta.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Not Authorized. Credenziali non valide.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthError"

  /utente/web/{id}:
    get:
      summary: Restituisce un utente web
      description: Endpoint per ottenere un utente web
      tags:
        - UtenteWeb
      security:
        - apiKeyAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID dell'utente web
      responses:
        "200":
          description: OK. Utente trovato
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UtenteWebGetResponse"
        "404":
          description: User not found with the specified ID
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      summary: Aggiorna informazioni di un utente web.
      description: "Endpoint per aggiornare informazioni di un utente web. Campi aggiornabili: email, nome, e password."
      tags:
        - UtenteWeb
      security:
        - apiKeyAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID dell'utente web
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UtenteWebModificaRequest"
      responses:
        "200":
          description: OK. Azienda aggiornata con successo.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PostSuccessfulResponse"
        "400":
          description: Bad Request. Richiesta errata, vedi errore nel corpo della risposta.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Not Found. Utente web con l'id specificato non trovato
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"



  /aziende:
    get:
      summary: Cerca tutte le aziende convenzionate
      description: Endpoint che ritorna tutte le aziende convenzionate
      tags:
        - Aziende
      security:
        - apiKeyAuth: []
      responses:
        "200":
          description: OK. Lista di aziende, potrebbe essere vuota.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AziendeGetResponse"
        "500":
          description: Internal Server Error. Errore interno al server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: Inserisce una nuova azienda
      description: Endpoint per inserire un'azienda
      tags:
        - Aziende
      security:
        - apiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Azienda"
      responses:
        "201":
          description: OK. Azienda aggiunta con successo.
          headers:
            Location:
              schema:
                type: string
              description: Link alla nuova azienda.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PostSuccessfulResponse"
        "400":
          description: Bad Request. Richiesta errata, vedi errore nel corpo della risposta.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error. Errore interno al server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /aziende/{id}:
    get:
      summary: Restituisce un'azienda.
      description: Endpoint per ottenere un'azienda
      tags:
        - Aziende
      security:
        - apiKeyAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID dell'azienda
      responses:
        "200":
          description: OK. Azienda trovata.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AziendaGetResponse"
        "404":
          description: Not Found. Azienda con l'id specificato non trovata
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    put:
      summary: Aggiorna informazioni di un'azienda.
      description: "Endpoint per aggiornare informazioni di un'azienda. Campi aggiornabili: email e password."
      tags:
        - Aziende
      security:
        - apiKeyAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID dell'azienda
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AziendeModificaRequest"
      responses:
        "200":
          description: OK. Azienda aggiornata con successo.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PostSuccessfulResponse"
        "400":
          description: Bad Request. Richiesta errata, vedi errore nel corpo della risposta.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Not Found. Azienda con l'id specificato non trovata
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /aziende/{id}/premi:
    post:
      summary: Inserisce un nuovo premio
      description: Endpoint per inserire un nuovo premio
      tags:
        - Aziende
      security:
        - apiKeyAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID dell'azienda
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Premio"
      responses:
        "201":
          description: Created. Nuovo premio creato con successo. Link in Location header.
          headers:
            Location:
              schema:
                type: string
              description: Link al nuovo premio.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PostSuccessfulResponse"
        "400":
          description: Bad Request. Richiesta errata, vedi errore nel corpo della risposta.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Not Found. Azienda con l'id specificato non trovata
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /segnalazioni:
    get:
      summary: Restituisce tutte le segnalazioni.
      description: Endpoint per ottenere le segnalazioni.
      tags:
        - Segnalazioni
      security:
        - apiKeyAuth: []
      responses:
        "200":
          description: OK. Lista segnalazioni.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SegnalazioniResponse"
        "404":
          description: Azienda not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /segnalazioni/{id}:
    get:
      summary: Restituisce una segnalazione per ID.
      description: Endpoint per ottenere una segnalazione specifica.
      tags:
        - Segnalazioni
      security:
        - apiKeyAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID della segnalazione da restituire
          schema:
            type: string
      responses:
        "200":
          description: OK. Dettagli della segnalazione.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SegnalazioniResponse"
        "404":
          description: Segnalazione non trovata.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    put:
      summary: Aggiorna lo stato di una segnalazione.
      description: >
        Endpoint per aggiornare lo stato di una segnalazione specifica.
        Il campo "status" nella richiesta deve essere uno dei seguenti valori: "aperta", "presa_in_carico", "conclusa".
      tags:
        - Segnalazioni
      security:
        - apiKeyAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID della segnalazione da aggiornare
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  enum:
                    - aperta
                    - presa_in_carico
                    - conclusa
      responses:
        "200":
          description: OK. Lo stato della segnalazione è stato aggiornato con successo.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "400":
          description: Errore di validazione del campo "status".
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Segnalazione non trovata.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Errore interno del server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /segnalazioni/immagini:
    post:
      summary: Carica un'immagine.
      description: Endpoint per caricare un'immagine nel server.
      tags:
        - Segnalazioni
      security:
        - apiKeyAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
                  description: File dell'immagine da caricare.

      responses:
        "200":
          description: OK. Immagine caricata con successo.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    default: true
                  imageKey:
                    type: string
                    description: Chiave univoca per l'immagine caricata.
        "400":
          description: >
            Errore di validazione. Nessuna immagine fornita.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Errore interno del server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /segnalazioni/immagini/{imageKey}:
    get:
      summary: Ottiene un'immagine.
      description: Endpoint per ottenere un'immagine dal server.
      tags:
        - Segnalazioni
      security:
        - apiKeyAuth: []
      parameters:
        - name: imageKey
          in: path
          required: true
          description: Chiave univoca dell'immagine
          schema:
            type: string
      responses:
        "200":
          description: OK. Immagine ottenuta con successo.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    default: true
                  imageUrl:
                    type: string
                    description: URL pre-firmato per l'immagine.
        "500":
          description: Errore interno del server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /premi:
    get:
      summary: Cerca tutti i premi disponibili
      description: Endpoint che ritorna tutti i premi disponibili
      tags:
        - Premi
      security:
        - apiKeyAuth: []
      responses:
        "200":
          description: OK. Lista di premi
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PremiGetResponse"
        "404":
          description: Premi not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"




components:
  # Security schemas
  securitySchemes:
    apiKeyAuth:
      type: apiKey
      in: header
      name: x-access-token

  schemas:
    # Utente mobile responses and requests schemas
    UtenteMobileRegistrationRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          description: Email dell'utente
        nome:
          type: string
          description: Nome dell'utente
        eta:
          type: number
          description: Età dell'utente
        password:
          type: string
          description: Hash della password dell'utente
      required:
        - email
        - nome
        - eta
        - password

    UtenteMobileLoginResponse:
      type: object
      properties:
        success:
          type: boolean
          description: Indica se il login è stato effettuato con successo
        message:
          type: string
          description: Messaggio di risposta
        token:
          type: string
          description: Token di autenticazione
        self:
          type: string
          description: Link all'utente mobile
        email:
          type: string
          format: email
          description: Email dell'utente
        userId:
          type: string
          description: ID dell'utente
        name:
          type: string
          description: Nome dell'utente
        points:
          type: number
          description: Punti dell'utente

    UtenteMobileGetResponse:
      type: object
      properties:
        success:
          type: boolean
          description: Indica se la richiesta è andata a buon fine
        UtenteMobile:
          type: object
          description: utente mobile specifico
          properties:
            id:
              type: string
              description: id dell'utente
            nome:
              type: string
              description: nome utente mobile
            email:
              type: string
              description: email dell'utente
              format: email
            eta:
              type: number
              description: era dell'utente
            punti:
              type: number
              description: punti dell'utente

    UtenteMobileSegnalazioniResponse:
      type: object
      properties:
        success:
          type: boolean
          description: Indica se la richiesta è andata a buon fine o no
        segnalazioni:
          type: array
          items:
            $ref: "#/components/schemas/SegnalazioneUtenteMobile"

    UtenteMobilePuntiResponse:
      type: object
      properties:
        success:
          type: boolean
          description: Indica se la richiesta è andata a buon fine o no
        punti:
          type: number
          description: Punti dell'utente

    UtenteMobilePuntiRequest:
      type: object
      properties:
        punti:
          type: number
          description: Nuovo punteggio

    # Utente web responses and requests
    UtenteWebLoginResponse:
      type: object
      properties:
        success:
          type: boolean
          description: Indica se il login è stato effettuato con successo
        message:
          type: string
          description: Messaggio di risposta
        token:
          type: string
          description: Token di autenticazione
        self:
          type: string
          description: Link all'utente web
        email:
          type: string
          format: email
          description: Email dell'utente
        userId:
          type: string
          description: ID dell'utente
        name:
          type: string
          description: Nome dell'utente

    # Aziende responses and requests schemas
    AziendeGetResponse:
      type: object
      properties:
        success:
          type: boolean
          description: Ritorna la lista di tutte le aziende
        aziende:
          type: array
          description: Lista di aziende
          items:
            $ref: "#/components/schemas/Azienda"

    AziendaGetResponse:
      type: object
      properties:
        success:
          type: boolean
          description: Ritorna l'azienda con l'ID indiacto
        aziende:
          $ref: "#/components/schemas/Azienda"

    AziendeModificaRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          description: Nuova email dell'azienda
        password:
          type: string
          description: Nuova password 
        password_again:
          type: string
          description: Nuova password per conferma
        old_password:
          type: string
          description: Vecchia password per autenticazione
      required:
        - email


    UtenteWebModificaRequest:
        type: object
        properties:
          nome:
            type: string
            description: Nuovo nome
          email:
            type: string
            format: email
            description: Nuova email 
          password:
            type: string
            description: Nuova password 
          password_again:
            type: string
            description: Nuova password per conferma
          old_password:
            type: string
            description: Vecchia password per autenticazione
        required:
          - email
          - nome


    # Segnalazioni responses and requests schemas
    SegnalazioniResponse:
      type: object
      properties:
        success:
          type: boolean
        segnalazioni:
          type: array
          description: Lista di segnalazioni.
          items:
            $ref: "#/components/schemas/Segnalazione"

    # Premi responses and requests schemas
    PremiGetResponse:
      type: object
      properties:
        success:
          type: boolean
          description: Indica se la richiesta è andata a buon fine
        premi:
          type: array
          description: lista di premi
          items:
            $ref: "#/components/schemas/Premio"

    UtenteWebGetResponse:
      type: object
      properties:
        success:
          type: boolean
          description: Indica se la richiesta è andata a buon fine
        UtenteMobile:
          type: object
          description: utente web specifico
          properties:
            id:
              type: string
              description: id dell'utente
            nome:
              type: string
              description: nome utente mobile
            email:
              type: string
              description: email dell'utente
              format: email
            supporto_tecnico::
              type: boolean
              description: se l'utente è supporto tecnico
               

    # Database models schemas
    Segnalazione:
      type: object
      properties:
        id_utente:
          type: string
          description: ID dell'utente che ha fatto la segnalazione
        id_segnalazione:
          type: string
          description: ID univoco della segnalazione
        luogo:
          type: string
          description: Formato "latitudine,longitudine"
        foto:
          type: string
          description: URL della foto allegata alla segnalazione
        tipo:
          type: string
          enum:
            - viabilità
            - illuminazione
            - segnaletica
            - sicurezza
            - barriereArchitettoniche
            - rifiuti
            - parcheggi
            - altro
          description: Tipo di segnalazione
        urgenza:
          type: string
          enum:
            - bassa
            - medio-bassa
            - medio-alta
            - alta
          description: Livello di urgenza della segnalazione
        status:
          type: string
          enum:
            - aperta
            - presa_in_carico
            - conclusa
          default: aperta
          description: Stato della segnalazione
        data:
          type: string
          format: date-time
          default: "2023-05-27T00:00:00Z"
          description: Data della segnalazione
      required:
        - id_utente
        - id_segnalazione
        - luogo

    SegnalazioneUtenteMobile:
      type: object
      properties:
        luogo:
          type: string
          description: Formato "latitudine,longitudine"
        foto:
          type: string
          description: URL della foto allegata alla segnalazione
        tipo:
          type: string
          enum:
            - strada
            - illuminazione
            - segnaletica
            - sicurezza
            - barriereArchitettoniche
            - rifiuti
            - parcheggi
            - altro
          description: Tipo di segnalazione
        urgenza:
          type: string
          enum:
            - bassa
            - medio-bassa
            - medio-alta
            - alta
          description: Livello di urgenza della segnalazione
        status:
          type: string
          enum:
            - aperta
            - presa_in_carico
            - conclusa
          default: aperta
          description: Stato della segnalazione
        data:
          type: string
          format: date-time
          default: "2023-05-27T00:00:00Z"
          description: Data della segnalazione
      required:
        - luogo

    Azienda:
      type: object
      properties:
        nome:
          type: string
          description: Nome dell'azienda
        p_iva:
          type: string
          description: Partita IVA dell'azienda
        email:
          type: string
          description: Indirizzo email dell'azienda
        password:
          type: string
          description: Password per l'accesso
      required:
        - nome
        - p_iva
        - email
        - password

    UtenteWeb:
      type: object
      properties:
        email:
          type: string
          format: email
          description: Email dell'utente
        nome:
          type: string
          description: Nome dell'utente
        password:
          type: string
          description: Hash della password dell'utente
        supporto_tecnico:
          type: boolean
          description: Indica se l'utente è un supporto tecnico
          default: false
      required:
        - password
        - email
        - nome

    Premio:
      type: object
      properties:
        nome:
          type: string
          description: Nome del premio
        valore:
          type: number
          description: Valore del premio
        tipo:
          type: string
          enum:
            - percentuale
            - contante
            - omaggio
            - quantita
          description: Tipo del premio
        descrizione:
          type: string
          description: Descrizione del premio
        costo_punti:
          type: number
          description: Costo in punti del premio
        idAzienda:
          type: string
          description: Nome dell'azienda che offre il premio
        validitaBuono:
          type: number
          description: Giorni di validità dal riscatto del buono
      required:
        - nome
        - valore
        - tipo
        - descrizione
        - costo_punti
        - validitaBuono
        - idAzienda

    # Errors schemas
    Error:
      type: object
      properties:
        success:
          type: boolean
          description: Indica se la richiesta è andata a buon fine o no
          default: false
        error:
          type: string
          description: Messaggio di errore

    AuthError:
      type: object
      properties:
        success:
          type: boolean
          description: Indica se la richiesta è andata a buon fine o no
          default: false
        error:
          type: string
          description: Indica l'errore di autenticazione

    #Others
    LoginRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          description: Email dell'utente
        password:
          type: string
          description: Hash della password dell'utente
      required:
        - password
        - email
        - nome
        - p_iva

    PostSuccessfulResponse:
      type: object
      properties:
        success:
          type: boolean
          description: Indica se la richiesta è andata a buon fine o meno.
